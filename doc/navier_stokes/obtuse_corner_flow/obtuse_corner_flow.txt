\mainpage 2D Stokes flow with an obtuse corner

A singularity in the pressure is encountered when we seek the solution to the
2D Stokes flow around an obtuse corner. This does not appear in the physical 
system, but does appear if we do not account for solution to the homogeneous 
problem.

In this demo, we choose a simple geometry to illustrate how the artefact
expresses itself and demonstrate the changes needed to remove it.

\section geometry Problem geometry

\section equations Equations and Boundary conditions

We define our sector domain so that it has radius \f$R\f$ and interior angle \f$\alpha\f$. One straight side is aligned with the vertical with the azimuthal angle varying counter clockwise through to \f$\alpha\f$.
In the bulk \f$\Omega\f$, we have the Stokes equations,
\f[\nabla \cdot u = 0,\ \nabla \cdot \tau = 0.\f]
where \f$\tau = -p I + \nabla \otimes u + (\nabla \otimes u)^T\f$.
On the vertical boundary, \f$S_0\f$,
  \f[u \cdot n                 = 0,\ {t} \cdot {\tau} \cdot {n}  = \frac{1}{l} \left({u}\cdot {t} - 1\right).\f]
where \f$l\f$ is the slip length and we have non-dimensionalised the system such that the wall velocity is unity.

On the diagonal boundary, \f$S_2\f$, we have no penetration and pure slip, or equivalently, a tangential stress free condition.
\f[{u} \cdot {n}                 = 0 , {t} \cdot {\tau} \cdot {n}  = 0.\f]

On the curved far field boundary, \f$S_1\f$, we employ the following condition,
\f[({n} \cdot \nabla) {u}  = 0.\f]
The pressure at the top of the sector is set to zero, at \f$x = 0, z = R\f$,
\f[p = 0.\f]

\section lagrange Lagrange multipliers

The no-penetration conditions are imposed via Lagrange multipliers.
On the vertical boundary, \f$S_0\f$,
\f[\tau \cdot n = \lambda_1 n\f]
On the diagonal boundary, \f$S_2\f$,
\f[\tau \cdot n = \lambda_2 n\f]
The far field condition is imposed via Lagrange multipliers also, one for each direction.
On the far field boundary, \f$S_1\f$,
\f[ \tau \cdot n = \lambda_{3,4} \dots \f]
At the ends of the curved boundary, \f$S_1\f$, we pin the lagrange multipliers. If we do not, then the Jacobian becomes singular. At \f$(r,z) = (R,0),(R,\alpha)\f$,
\f[\lambda_{3,4} = 0\f]
There are no other constraints on the Lagrange multipliers.

\section results1 Results without the correction

@I w 0.75\textwidth Pasted_image_20241127151707 "Horizontal velocity "

@I w 0.75\textwidth Pasted_image_20241127151733 "Vertical velocity "

@I w 0.75\textwidth Pasted_image_20241127151804 "Pressure around the corner "

\section correction Including the correction

We include the singular eigensolution through an additional degree of freedom, \f$c\f$, which determines its scaling.
\f[ u = c \bar{u} + \tilde{u} \f]
\f[ p = \tilde{p} \f]
\f[ \tau = c \bar{\tau} + \tilde{\tau} \f]
Noting that \f$\bar{p} = 0\f$.
The system of equations, now expressed in terms of \f$c, \bar{*}, \tilde{*}\f$ is given by:
In the bulk \f$\Omega\f$, we have the Stokes equations,
\f[c \nabla\bar{u} + \nabla \cdot \tilde{u} = 0,\ c \nabla \cdot \bar{\tau} + \nabla \cdot \tilde{\tau} = 0.\f]
(By include the \f$c \nabla \cdot \bar{\tau}\f$ within the bulk,  the natural boundary condition becomes \f$c {t} \cdot \bar{\tau} \cdot {n} + {t} \cdot \tilde{\tau} \cdot {n}\f$ which matches \f${t} \cdot {\tau} \cdot {n}\f$ at the interior boundary.)
And the total velocity equations,
\f[ u = c \bar{u} + \tilde{u} \f]
On the vertical boundary, \f$S_0\f$,
\f[\tilde{u} \cdot n                 = 0,\ c {t} \cdot \bar{\tau} \cdot {n} + {t} \cdot \tilde{\tau} \cdot {n}  = \frac{1}{l} \left(\tilde{u}\cdot {t} - 1\right) + \frac{c}{l} \bar{u}\cdot {t}.\f]
where \f$l\f$ is the slip length and we have non-dimensionalised the system such that the wall velocity is unity.

On the diagonal boundary, \f$S_2\f$, we have no penetration and pure slip, or equivalently, a tangential stress free condition.
\f[\tilde{u} \cdot {n}                 = 0 , c {t} \cdot \bar{\tau} \cdot {n} + {t} \cdot \tilde{\tau} \cdot {n}  = 0.\f]
On the curved far field boundary, \f$S_1\f$, we employ the following condition,
\f[c ({n} \cdot \nabla) \bar{u} + ({n} \cdot \nabla) \tilde{u}  = 0.\f]
The pressure at the top of the sector is set to zero, at \f$x = 0, z = R\f$,
\f[\tilde{p} = 0.\f]

Additionally we would like to impose  \f$\lim_{\rho \to 0} \partial{p}/\partial{\theta} = 0\f$, however due the discrete mesh coordinates we impose the following instead,
\f[p(\epsilon,0) = p(\epsilon,\alpha)\f]
where \f$\epsilon \ll 1\f$ and polar coordinates are used.

The Lagrange multipliers remain the same but are imposed on \f$\tilde{u}\f$ instead of \f$u\f$.

\section implementation2 Implementation    

The total velocity equations are implemented in `SingularNavierStokesElement`s which wrap around a base class, e.g. `SingularNavierStokesElement<TTaylorHoodElement<2>>`.
The `SingularNavierStokesElement`s also swap the location of where the total velocity \f$u\f$ and the finite element velocity \f$\tilde u\f$ is stored, which implements \f$u_+ = u_-\f$ across any internal augmented/non-augmented boundary.

The new degree of freedom (singular function scaling) and the eigensolution functions are contained within a `SingularNavierStokesSolutionElement`.
The pressure evaluation contributions are implemented in two `PressureEvaluationElement`s which add the pressure to the the singular function scaling residual.
The additional term \f$-(c/l) \bar u\cdot t\f$ is included through `SingularNavierStokesTractionElement`s along that boundary.

Only elements close to the corner are augmented, e.g. within a given radius, and due to the careful construction, no further conditions are required on the internal boundary.

[[Difference in equations compared to Sprittles]]

\section results2 Results with the correction

@I w 0.75\textwidth Pasted_image_20241127165718 "Horizontal velocity "

@I w 0.75\textwidth Pasted_image_20241127165736 "Vertical velocity "

@I w 0.75\textwidth Pasted_image_20241127165809 "Pressure around the corner "

The scaling for the eigensolution is, \f$A = 1.09791871005202624\f$.

\section region Augmenting within a small region around the corner

- Outside the augmented region we are solving for \f$u\f$ and \f$p\f$.
- Within the augmented region, we are solving for \f$\tilde{u}\f$, \f$\tilde{p}\f$, \f$u\f$ and \f$p\f$.
- The equations within the augmented region are derived from the full equations, including the singular term and expanding.
- The natural boundary condition on the free surface is sufficient.
- On the slip surface we need to include the singular eigensolutions velocity contribution to the slip condition.
- On the far field conditions we need to include the eigensolution terms also. 
- By retaining the internal forcing from the eigensolution, when we have an internal boundary then we do not need to include the traction terms from the eigensolution.

<HR>
<HR>

\section implementation Implementation

The equations in the bulk are implemented with using `TTaylorHoodElement<2>`s.
The no-penetration conditions are imposed through `ImposeImpenetrabilityElement`s.
The far field conditions are imposed through new `FarFieldElement`s.
The slip condition is imposed through `NavierStokesSlipElement`s.

I am using a separate submesh for each of the conditions on the different boundaries.
The Lagrange multipliers get stored by adding additional dofs to the nodes and using the velocities interpolation strategy.
This is done in a way such that there can be multiple distinct Lagrange multipliers at corner nodes e.g. \f$\lambda_1\f$ and \f$\lambda_2\f$.

<HR>
<HR>

\section sources Source files for this tutorial
- The source files for this tutorial are located in the directory:\n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/obtuse_corner_flow/">
demo_drivers/navier_stokes/obtuse_corner_flow/
</A>
</CENTER>\n
- The driver code is: \n\n
<CENTER>
<A HREF="../../../../demo_drivers/navier_stokes/obtuse_corner_flow/structured_no_correction.cc">
demo_drivers/navier_stokes/obtuse_corner_flow/structured_no_correction.cc
<A HREF="../../../../demo_drivers/navier_stokes/obtuse_corner_flow/structured_with_correction_region.cc">
demo_drivers/navier_stokes/obtuse_corner_flow/structured_with_correction_region.cc
</A>
</CENTER>
.

// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2024 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for simple 2D triangle mesh class

// Include guards to prevent multiple inclusion of the header
#ifndef SECTOR_TRI_MESH_HEADER
#define SECTOR_TRI_MESH_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// Oomph-lib includes
#include "generic/mesh.h"
#include "generic/triangle_mesh.h"

namespace oomph
{
  //===================================================================
  /// Simple 2D triangular mesh for TElements
  //===================================================================
  template<class ELEMENT>
  class SectorTriMesh : public virtual TriangleMeshBase
  {
  public:
    enum
    {
      Slip_boundary_id,
      Far_field_boundary_id,
      Free_surface_boundary_id,
    };

    /// Constructor
    /// n_radial    : number of elements in the radial direction;
    /// n_azimuthal : number of elements in the azimuthal direction;
    /// radius      : radius of the sector
    /// angle       : interior angle of the sector
    /// Ordering of elements: 'inner left' to 'inner right' then 'outward'
    SectorTriMesh(const unsigned& n_radial,
                  const unsigned& n_azimuthal,
                  const double& radius,
                  const double& angle,
                  TimeStepper* time_stepper_pt = &Mesh::Default_TimeStepper);

    inline const double map_to_sector_x(const double r, const double a)
    {
      double xinit = 1.0;
      return xinit - r * sin(a);
    }

    inline const double map_to_sector_y(const double r, const double a)
    {
      double yinit = 0.0;
      return yinit + r * cos(a);
    }

    /// Access function for number of elements in x directions
    const unsigned& nradial() const
    {
      return N_radial;
    }

    /// Access function for number of elements in y directions
    const unsigned& nazimuthal() const
    {
      return N_azimuthal;
    }

    /// Interface for function that is used to setup the boundary
    /// information (Empty virtual function -- implement this for specific
    /// Mesh classes)
    virtual void setup_boundary_element_info() override
    {
      // There is a check for whether the stream is opened or not within the
      // setup boundary element info function. If it is not opened, then
      // nothing is outputted.
      std::ofstream unopened_stream;
      setup_boundary_element_info(unopened_stream);
    }

    /// Setup lookup schemes which establish whic elements are located
    /// next to mesh's boundaries. Doc in outfile (if it's open).
    /// (Empty virtual function -- implement this for specific
    /// Mesh classes)
    virtual void setup_boundary_element_info(std::ostream& outfile) override;

  private:
    /// Number of elements in x direction
    unsigned N_radial;

    /// Number of elements in y directions
    unsigned N_azimuthal;

    /// Length of mesh in x-direction
    double Radius;

    /// Length of mesh in y-direction
    double Angle;
  };

} // namespace oomph

#endif

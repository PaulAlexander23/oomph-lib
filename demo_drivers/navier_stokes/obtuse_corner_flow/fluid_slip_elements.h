// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for elements that are used to integrate fluid slips
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!
#ifndef OOMPH_FLUID_SLIP_ELEMENTS_HEADER
#define OOMPH_FLUID_SLIP_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif


// OOMPH-LIB headers
//#include "../generic/shape.h"
//#include "../generic/elements.h"
//#include "../generic/element_with_external_element.h"


namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an applied slip
  /// in the Navier Stokes eqns.
  /// The geometrical information can be read from the FaceGeometry<ELEMENT>
  /// class and and thus, we can be generic enough without the need to have
  /// a separate equations class.
  //======================================================================
  template<class ELEMENT>
  class NavierStokesSlipElement : public virtual NavierStokesFaceElement,
                                  public virtual FaceGeometry<ELEMENT>
  {
  private:
    unsigned Contact_line_data_index;

  protected:
    /// Pointer to an imposed slip function. Arguments:
    /// Eulerian coordinate; outer unit normal;
    /// applied slip. (Not all of the input arguments will be
    /// required for all specific load functions but the list should
    /// cover all cases)
    std::function<void(const double&,
                       const Vector<double>&,
                       const Vector<double>&,
                       Vector<double>&)>
      Slip_function;

    /// Pointer to an wall velocity function. Arguments:
    /// Eulerian coordinate; outer unit normal;
    /// applied velocity.
    void (*Wall_velocity_fct_pt)(const double& time,
                                 const Vector<double>& x,
                                 const Vector<double>& n,
                                 Vector<double>& result);

    /// Get the slip vector: Pass number of integration point
    /// (dummy), Eulerian coordinate and normal vector and return the load
    /// vector (not all of the input arguments will be required for all specific
    /// load functions but the list should cover all cases). This function is
    /// virtual so it can be overloaded for FSI.
    virtual void get_slip(const double& time,
                          const unsigned& intpt,
                          const Vector<double>& x,
                          const Vector<double>& n,
                          Vector<double>& slip) const
    {
      Slip_function(time, x, n, slip);
    }

    /// Get the wall velocity vector: Pass number of integration point
    /// (dummy), Eulerian coordinate and normal vector and return the load
    /// vector (not all of the input arguments will be required for all specific
    /// load functions but the list should cover all cases). This function is
    /// virtual so it can be overloaded for FSI.
    virtual void get_wall_velocity(const double& time,
                                   const unsigned& intpt,
                                   const Vector<double>& x,
                                   const Vector<double>& n,
                                   Vector<double>& wall_velocity) const
    {
      Wall_velocity_fct_pt(time, x, n, wall_velocity);
    }

    /// Helper function that actually calculates the residuals
    // This small level of indirection is required to avoid calling
    // fill_in_contribution_to_residuals in fill_in_contribution_to_jacobian
    // which causes all kinds of pain if overloading later on
    void fill_in_contribution_to_residuals_nst_slip(
      Vector<double>& residuals, DenseMatrix<double>& jacobian, unsigned flag);

  public:
    /// Constructor, which takes a "bulk" element and the
    /// value of the index and its limit
    NavierStokesSlipElement(FiniteElement* const& element_pt,
                            const int& face_index)
      : NavierStokesFaceElement(),
        FaceGeometry<ELEMENT>(),
        Contact_line_data_index(0),
        Wall_velocity_fct_pt(0)
    {
      // Build the face element
      element_pt->build_face_element(face_index, this);
    }

    void add_dependence_on_contact_line_node(
      SolidNode* const& contact_line_node_pt)
    {
      Contact_line_data_index =
        add_external_data(contact_line_node_pt->variable_position_pt());
    }


    /// Reference to the slip function pointer
    void set_slip_function(
      const std::function<void(const double&,
                               const Vector<double>&,
                               const Vector<double>&,
                               Vector<double>&)>& slip_function)
    {
      Slip_function = slip_function;
    }

    /// Reference to the wall velocity function pointer
    void (*&wall_velocity_fct_pt())(const double& time,
                                    const Vector<double>& x,
                                    const Vector<double>& n,
                                    Vector<double>& slip)
    {
      return Wall_velocity_fct_pt;
    }


    /// Return the residuals
    void fill_in_contribution_to_residuals(Vector<double>& residuals)
    {
      fill_in_contribution_to_residuals_nst_slip(
        residuals, GeneralisedElement::Dummy_matrix, 0);
    }


    /// Fill in contribution from Jacobian
    // void fill_in_contribution_to_jacobian(Vector<double>& residuals,
    //                                      DenseMatrix<double>& jacobian)
    //{
    //  // Fill in analytic contribution of internal equations
    //  fill_in_contribution_to_residuals_nst_slip(
    //    residuals, jacobian, 1);

    //  // Fill in the solid position contribution by finite differences
    //  fill_in_jacobian_from_solid_position_by_fd(jacobian);

    //  // Fill in the contribution from external data by finite differences
    //  fill_in_jacobian_from_external_by_fd(residuals, jacobian, false);
    //}

    /// Output function
    void output(std::ostream& outfile)
    {
      unsigned nplot = 5;
      output(outfile, nplot);
    }

    /// Output function
    void output(std::ostream& outfile, const unsigned& n_plot)
    {
      // Number of dimensions
      unsigned n_dim = this->nodal_dimension();

      // Find out how many nodes there are
      const unsigned n_node = nnode();

      // Get continuous time from timestepper of first node
      double time = node_pt(0)->time_stepper_pt()->time_pt()->time();

      // Set up memory for the shape functions
      Shape psi(n_node);

      // Local and global coordinates
      Vector<double> s(n_dim - 1);

      // Loop over plot points
      unsigned num_plot_points = this->nplot_points(n_plot);
      for (unsigned iplot = 0; iplot < num_plot_points; iplot++)
      {
        // Get local coordinates of plot point
        this->get_s_plot(iplot, n_plot, s);

        // Outer unit normal
        Vector<double> unit_normal(n_dim);
        outer_unit_normal(s, unit_normal);

        // Find the shape functions
        shape(s, psi);

        // Initialise to zero
        Vector<double> interpolated_x(n_dim);
        Vector<double> interpolated_u(n_dim);

        // Calculate stuff
        for (unsigned l = 0; l < n_node; l++)
        {
          // Loop over directions
          for (unsigned i = 0; i < n_dim; i++)
          {
            interpolated_x[i] += this->nodal_position(l, i) * psi[l];
          }

          for (unsigned i = 0; i < n_dim; i++)
          {
            interpolated_u[i] +=
              this->nodal_value(l, u_index_nst(l, i)) * psi[l];
          }
        }

        // Get the imposed slip
        Vector<double> slip(n_dim);

        // Dummy integration point
        unsigned ipt = 0;
        get_slip(time, ipt, interpolated_x, unit_normal, slip);

        // Output the x,y,..
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << interpolated_x[i] << ",";
        }

        // Output the slip components
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << slip[i] << ",";
        }

        // Output normal
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << unit_normal[i] << ",";
        }

        // Output the velocity, don't include the comma on the final value
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << interpolated_u[i] << ",";
        }

        // Pressure
        outfile << this->interpolated_p(s) << std::endl;
      }
    }
  };

  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////


  //=====================================================================
  /// Return the residuals for the
  /// NavierStokesSlipElement equations
  //=====================================================================
  template<class ELEMENT>
  void NavierStokesSlipElement<ELEMENT>::
    fill_in_contribution_to_residuals_nst_slip(Vector<double>& residuals,
                                               DenseMatrix<double>& jacobian,
                                               unsigned flag)
  {
    // Find out how many nodes there are
    unsigned n_node = nnode();

    // Get continuous time from timestepper of first node
    double time = node_pt(0)->time_stepper_pt()->time_pt()->time();

#ifdef PARANOID
    // Find out how many positional dofs there are
    unsigned n_position_type = this->nnodal_position_type();
    if (n_position_type != 1)
    {
      throw OomphLibError("NavierStokes is not yet implemented for "
                          "more than one position type",
                          OOMPH_CURRENT_FUNCTION,
                          OOMPH_EXCEPTION_LOCATION);
    }
#endif

    // Find out the dimension of the node
    unsigned n_dim = this->nodal_dimension();

    // Integer to hold the local equation number
    int local_eqn = 0;
    int local_unknown = 0;

    // Set up memory for the shape functions
    // Note that in this case, the number of lagrangian coordinates is always
    // equal to the dimension of the nodes
    Shape psi(n_node);
    DShape dpsids(n_node, n_dim - 1);

    // Set the value of n_intpt
    unsigned n_intpt = integral_pt()->nweight();

    // Loop over the integration points
    for (unsigned ipt = 0; ipt < n_intpt; ipt++)
    {
      // Get the integral weight
      double w = integral_pt()->weight(ipt);

      // Only need to call the local derivatives
      dshape_local_at_knot(ipt, psi, dpsids);

      // Calculate the Eulerian and Lagrangian coordinates
      Vector<double> interpolated_x(n_dim, 0.0);
      Vector<double> interpolated_t(n_dim, 0.0);
      Vector<double> interpolated_u(n_dim, 0.0);

      // Calculate positions and derivatives
      for (unsigned l = 0; l < n_node; l++)
      {
        // Loop over directions
        for (unsigned i = 0; i < n_dim; i++)
        {
          // Calculate the Eulerian coords
          const double x_local = nodal_position(l, i);
          interpolated_x[i] += x_local * psi(l);
          interpolated_t[i] += x_local * dpsids(l, 0);
        }

        // Loop over directions
        for (unsigned i = 0; i < n_dim; i++)
        {
          interpolated_u[i] += this->nodal_value(l, u_index_nst(l, i)) * psi(l);
        }
      }

      // Get the outer unit normal
      Vector<double> interpolated_normal(n_dim);
      outer_unit_normal(ipt, interpolated_normal);

      // Calculate the length of the tangent Vector
      double tlength = interpolated_t[0] * interpolated_t[0] +
                       interpolated_t[1] * interpolated_t[1];

      // Set the Jacobian of the line element
      double J = sqrt(tlength);

      // Premultiply the weights and the square-root of the determinant of
      // the metric tensor
      double W = w * J;

      // Now calculate the load
      Vector<double> slip(n_dim);
      get_slip(time, ipt, interpolated_x, interpolated_normal, slip);

      Vector<double> wall_velocity(n_dim);
      get_wall_velocity(
        time, ipt, interpolated_x, interpolated_normal, wall_velocity);

      // Subtract off the wall velocity
      for (unsigned i = 0; i < n_dim; i++)
      {
        interpolated_u[i] = interpolated_u[i] - wall_velocity[i];
      }

      // Project velocity onto tangent plane
      Vector<double> interpolated_u_tangent(n_dim, 0.0);
      double dot = 0.0;
      for (unsigned i = 0; i < n_dim; i++)
      {
        dot += interpolated_u[i] * interpolated_normal[i];
      }
      for (unsigned i = 0; i < n_dim; i++)
      {
        interpolated_u_tangent[i] =
          interpolated_u[i] - dot * interpolated_normal[i];
      }

      // Loop over the test functions, nodes of the element
      for (unsigned l = 0; l < n_node; l++)
      {
        // Loop over the velocity components
        for (unsigned i = 0; i < n_dim; i++)
        {
          // Equation number
          local_eqn = this->nst_momentum_local_eqn(l, i);
          /*IF it's not a boundary condition*/
          if (local_eqn >= 0)
          {
            // Add the slip terms to the residuals
            if (slip[i] > 0)
            {
              residuals[local_eqn] -=
                1.0 / slip[i] * psi(l) * interpolated_u_tangent[i] * W;

              // Add in the Jacobian term
              if (flag)
              {
                // Loop over the test functions, nodes of the element
                for (unsigned l2 = 0; l2 < n_node; l2++)
                {
                  local_unknown = this->nst_u_local_unknown(l2, i);
                  // If it's a non-zero dof add
                  if (local_unknown >= 0)
                  {
                    jacobian(local_eqn, local_unknown) -=
                      1.0 / slip[i] * psi(l) *
                      (1 - interpolated_normal[l2] * interpolated_normal[i]) *
                      psi(l2) * W;
                  }
                }
              }
            }
          }
        }
      } // End of loop over shape functions
    } // End of loop over integration points
  }

} // namespace oomph
#endif

// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
#ifndef OOMPH_NET_FLUX_ELEMENTS_HEADER
#define OOMPH_NET_FLUX_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif


// OOMPH-LIB headers
//#include "../generic/shape.h"
//#include "../generic/elements.h"
//#include "../generic/element_with_external_element.h"
#include "generic.h"

namespace oomph
{
  class NetFluxElement : public virtual GeneralisedElement
  {
  public:
    typedef void (*FluxFctPt)(const double& t, double& flux);

    NetFluxElement(FluxFctPt flux_fct_pt, Time* time_pt)
      : Flux_fct_pt(flux_fct_pt), Time_pt(time_pt)
    {
      // Add the new Data to internal Data for this element
      Lagrange_multiplier_data_index = add_internal_data(new Data(1));
      internal_data_pt(Lagrange_multiplier_data_index)->set_value(0, 1.0);
    }

    void fill_in_contribution_to_dresiduals_dparameter(
      double* const& parameter_pt, Vector<double>& dres_dparam)
    {
    }

    /// Compute the element's residual Vector and the jacobian matrix
    /// Virtual function can be overloaded by hanging-node version
    void fill_in_contribution_to_djacobian_dparameter(
      double* const& parameter_pt,
      Vector<double>& dres_dparam,
      DenseMatrix<double>& djac_dparam)
    {
    }

    /// Add the element's contribution to its residual vector:
    /// i.e. the flux constraint.
    inline void fill_in_contribution_to_residuals(Vector<double>& residuals)
    {
      // Call the generic routine
      fill_in_generic_residual_contribution_flux(residuals);
    }

    /// This function returns the residuals and adds the
    /// Jacobian contributions
    inline void fill_in_contribution_to_jacobian(Vector<double>& residuals,
                                                 DenseMatrix<double>& jacobian)
    {
      const bool use_fd = false;
      if (use_fd)
      {
        GeneralisedElement::fill_in_contribution_to_jacobian(residuals,
                                                             jacobian);
      }
      else
      {
        // Call the generic routine
        fill_in_generic_residual_contribution_flux(residuals);
      }
    }

    void fill_in_contribution_to_jacobian_and_mass_matrix(
      Vector<double>& residuals,
      DenseMatrix<double>& jacobian,
      DenseMatrix<double>& mass_matrix)
    {
      fill_in_contribution_to_jacobian(residuals, jacobian);
    }

    /// This function returns the residuals for the
    /// flux master element.
    void fill_in_generic_residual_contribution_flux(Vector<double>& residuals)
    {
      double t = Time_pt->time();
      double flux = 0.0;
      (*Flux_fct_pt)(t, flux);

      int local_eqn = internal_local_eqn(Lagrange_multiplier_data_index, 0);
      if (local_eqn >= 0)
      {
        residuals[local_eqn] -= flux;
      }
    }

    Data* get_lagrange_multiplier_data_pt()
    {
      return internal_data_pt(Lagrange_multiplier_data_index);
    }

    void output(std::ostream& output_stream)
    {
      double t = Time_pt->time();
      double flux = 0.0;
      (*Flux_fct_pt)(t, flux);

      output_stream << t << " ";
      output_stream << flux << " ";
      output_stream
        << internal_data_pt(Lagrange_multiplier_data_index)->value(0);
      output_stream << std::endl;
    }

  private:
    FluxFctPt Flux_fct_pt;
    Time* Time_pt;
    unsigned Lagrange_multiplier_data_index;
  };

} // namespace oomph

#endif

// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for elements that are used to integrate fluid slips
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!
#ifndef OOMPH_AXISYM_NAVIER_STOKES_FLUX_ELEMENTS_HEADER
#define OOMPH_AXISYM_NAVIER_STOKES_FLUX_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif


// OOMPH-LIB headers
//#include "../generic/shape.h"
//#include "../generic/elements.h"
//#include "../generic/element_with_external_element.h"


namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an net flux
  /// for the axisym Navier Stokes eqns.
  /// The geometrical information can be read from the FaceGeometry<ELEMENT>
  /// class and and thus, we can be generic enough without the need to have
  /// a separate equations class.
  //======================================================================
  template<class ELEMENT>
  class AxisymmetricNavierStokesFluxElement
    : public virtual FaceGeometry<ELEMENT>,
      public virtual AxisymmetricNavierStokesFaceElement
  {
  protected:
    /// Helper function that actually calculates the residuals
    // This small level of indirection is required to avoid calling
    // fill_in_contribution_to_residuals in fill_in_contribution_to_jacobian
    // which causes all kinds of pain if overloading later on
    void fill_in_contribution_to_residuals_axisymmetric_nst_flux(
      Vector<double>& residuals, DenseMatrix<double>& jacobian, unsigned flag);


  public:
    /// Constructor, which takes a "bulk" element and the
    /// value of the index and its limit
    AxisymmetricNavierStokesFluxElement(FiniteElement* const& element_pt,
                                        const int& face_index,
                                        Data* const& net_flux_data_pt)
      : FaceGeometry<ELEMENT>(), AxisymmetricNavierStokesFaceElement()
    {
      // Attach the geometrical information to the element. N.B. This function
      // also assigns nbulk_value from the required_nvalue of the bulk element
      element_pt->build_face_element(face_index, this);


      add_external_data(net_flux_data_pt);
    }

    void fill_in_contribution_to_dresiduals_dparameter(
      double* const& parameter_pt, Vector<double>& dres_dparam)
    {
    }

    /// Compute the element's residual Vector and the jacobian matrix
    /// Virtual function can be overloaded by hanging-node version
    void fill_in_contribution_to_djacobian_dparameter(
      double* const& parameter_pt,
      Vector<double>& dres_dparam,
      DenseMatrix<double>& djac_dparam)
    {
    }

    /// Return the residuals
    void fill_in_contribution_to_residuals(Vector<double>& residuals)
    {
      fill_in_contribution_to_residuals_axisymmetric_nst_flux(
        residuals, GeneralisedElement::Dummy_matrix, 0);
    }


    /// Fill in contribution from Jacobian
    void fill_in_contribution_to_jacobian(Vector<double>& residuals,
                                          DenseMatrix<double>& jacobian)
    {
      // Call the residuals and Jacobian
      fill_in_contribution_to_residuals_axisymmetric_nst_flux(
        residuals, jacobian, 1);
    }

    /// Fill in contribution from Jacobian and mass_matrix
    void fill_in_contribution_to_jacobian_and_mass_matrix(
      Vector<double>& residuals,
      DenseMatrix<double>& jacobian,
      DenseMatrix<double>& mass_matrix)
    {
      // Call the residuals and Jacobian
      fill_in_contribution_to_residuals_axisymmetric_nst_flux(
        residuals, jacobian, 1);
    }

    /// Specify the value of nodal zeta from the face geometry
    /// The "global" intrinsic coordinate of the element when
    /// viewed as part of a geometric object should be given by
    /// the FaceElement representation, by default (needed to break
    /// indeterminacy if bulk element is SolidElement)
    double zeta_nodal(const unsigned& n,
                      const unsigned& k,
                      const unsigned& i) const
    {
      return FaceElement::zeta_nodal(n, k, i);
    }

    /// Number of scalars/fields output by this element. Reimplements
    /// broken virtual function in base class.
    unsigned nscalar_paraview() const
    {
      // Number of dimensions
      unsigned n_dim = this->nodal_dimension();

      return 2 * (n_dim + 1);
    }


    /// Return the i-th velocity component at local node n
    /// The default is to asssume that n is the local node number
    /// and the i-th velocity component is the i-th unknown stored at the node.
    virtual inline double u(const unsigned& n, const unsigned& i)
    {
      return node_pt(n)->value(this->u_index_axi_nst(n, i));
    }

    /// Output the element data
    void output(std::ostream& out, const unsigned& n_plot)
    {
      const unsigned el_dim = this->dim();
      const unsigned n_dim = this->nodal_dimension();
      const unsigned n_velocity = 3;
      const unsigned n_node = nnode();
      // Set output Vector
      Vector<double> s(el_dim);

      // Set up memory for the shape functions
      Shape psi(n_node);

      // Loop over plot points
      unsigned num_plot_points = nplot_points(n_plot);
      for (unsigned iplot = 0; iplot < num_plot_points; iplot++)
      {
        // Get local coordinates of plot point
        get_s_plot(iplot, n_plot, s);

        // Find values of shape function
        shape(s, psi);

        // Sort x and u
        Vector<double> interpolated_x(n_dim, 0.0);
        Vector<double> interpolated_u(n_velocity, 0.0);

        // Calculate positions and derivatives
        for (unsigned l = 0; l < n_node; l++)
        {
          // Loop over directions
          for (unsigned i = 0; i < n_dim; i++)
          {
            // Calculate the Eulerian coords
            interpolated_x[i] += nodal_position(l, i) * psi(l);
          }

          // Loop over directions
          for (unsigned i = 0; i < n_velocity; i++)
          {
            interpolated_u[i] += u(l, i) * psi(l);
          }
        }

        // Output the x,y,u,v
        for (unsigned i = 0; i < n_dim; i++)
        {
          out << interpolated_x[i] << " ";
        }
        for (unsigned i = 0; i < n_velocity - 1; i++)
        {
          out << interpolated_u[i] << " ";
        }
        out << interpolated_u[n_velocity - 1];
        out << std::endl;
      }
    }
  };

  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////

  //=====================================================================
  /// Return the residuals for the
  /// AxisymmetricNavierStokesFluxElement equations
  //=====================================================================
  template<class ELEMENT>
  void AxisymmetricNavierStokesFluxElement<ELEMENT>::
    fill_in_contribution_to_residuals_axisymmetric_nst_flux(
      Vector<double>& residuals, DenseMatrix<double>& jacobian, unsigned flag)
  {
    // Find out how many nodes there are
    unsigned n_node = nnode();

#ifdef PARANOID
    // Find out how many positional dofs there are
    unsigned n_position_type = this->nnodal_position_type();
    if (n_position_type != 1)
    {
      throw OomphLibError("AxisymmetricNavierStokes is not yet implemented for "
                          "more than one position type",
                          OOMPH_CURRENT_FUNCTION,
                          OOMPH_EXCEPTION_LOCATION);
    }
#endif

    // Find out the dimension of the node
    unsigned n_dim = this->nodal_dimension();

    // Integer to hold the local equation number
    int local_eqn = 0;
    int local_unknown = 0;

    // Set up memory for the shape functions
    // Note that in this case, the number of lagrangian coordinates is always
    // equal to the dimension of the nodes
    Shape psi(n_node);
    DShape dpsids(n_node, n_dim - 1);

    // Set the value of n_intpt
    unsigned n_intpt = integral_pt()->nweight();

    // Loop over the integration points
    for (unsigned ipt = 0; ipt < n_intpt; ipt++)
    {
      // Get the integral weight
      double w = integral_pt()->weight(ipt);

      // Only need to call the local derivatives
      dshape_local_at_knot(ipt, psi, dpsids);

      // Calculate the Eulerian and Lagrangian coordinates
      Vector<double> interpolated_x(n_dim, 0.0);
      Vector<double> interpolated_t1(n_dim, 0.0);
      Vector<double> interpolated_u(n_dim + 1, 0.0);

      // Calculate positions and derivatives
      for (unsigned l = 0; l < n_node; l++)
      {
        // Loop over directions
        for (unsigned i = 0; i < n_dim; i++)
        {
          // Calculate the Eulerian coords
          const double x_local = nodal_position(l, i);
          interpolated_x[i] += x_local * psi(l);
          interpolated_t1[i] += x_local * dpsids(l, 0);
        }

        // Loop over directions
        for (unsigned i = 0; i < n_dim + 1; i++)
        {
          interpolated_u[i] += u(l, i) * psi(l);
        }
      }

      // Get the outer unit normal
      Vector<double> interpolated_normal(n_dim);
      outer_unit_normal(ipt, interpolated_normal);

      // Add the azimuthal direction manually
      interpolated_normal.push_back(0.0);

      // Calculate the length of the tangent Vector
      double tlength = interpolated_t1[0] * interpolated_t1[0] +
                       interpolated_t1[1] * interpolated_t1[1];

      // Set the Jacobian of the line element
      // multiplied by r (x[0])
      double J = sqrt(tlength) * interpolated_x[0];

      // Premultiply the weights and the square-root of the determinant of
      // the metric tensor
      double W = w * J;

      // Assemble dot product
      double dot = 0.0;
      for (unsigned i = 0; i < n_dim + 1; i++)
      {
        dot += interpolated_u[i] * interpolated_normal[i];
      }

      // Lagrange multiplier
      double lambda = external_data_pt(0)->value(0);

      // Loop over the test functions, nodes of the element
      for (unsigned l = 0; l < n_node; l++)
      {
        // Equation number
        local_eqn = this->external_local_eqn(0, 0);
        /*IF it's not a boundary condition*/
        if (local_eqn >= 0)
        {
          // Add the loading terms to the residuals
          residuals[local_eqn] += dot * psi(l) * W;

          // Add in the Jacobian term
          if (flag)
          {
            // Loop over the test functions, nodes of the element
            for (unsigned l2 = 0; l2 < n_node; l2++)
            {
              // Loop over the velocity components
              for (unsigned i = 0; i < n_dim + 1; i++)
              {
                local_unknown =
                  this->nodal_local_eqn(l2, this->u_index_axi_nst(l2, i));
                // If it's a non-zero dof add
                if (local_unknown >= 0)
                {
                  jacobian(local_eqn, local_unknown) +=
                    interpolated_normal[i] * psi(l2) * psi(l) * W;
                }
              }
            }
          }

          // Loop over the velocity components
          for (unsigned i = 0; i < n_dim + 1; i++)
          {
            local_eqn =
              this->nodal_local_eqn(l, this->axi_momentum_index_nst(l, i));
            if (local_eqn >= 0)
            {
              residuals[local_eqn] +=
                lambda * interpolated_normal[i] * psi(l) * W;

              // Add in the Jacobian term
              if (flag)
              {
                // Equation number
                local_unknown = this->external_local_eqn(0, 0);
                /*IF it's not a boundary condition*/
                if (local_unknown >= 0)
                {
                  jacobian(local_eqn, local_unknown) +=
                    interpolated_normal[i] * psi(l) * W;
                }
              }
            }
          }
        }

      } // End of loop over shape functions
    } // End of loop over integration points
  }


} // namespace oomph


#endif

// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for elements that are used to integrate fluid slips
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!
#ifndef LINEARISED_AXISYM_FLUID_SLIP_ELEMENTS_HEADER
#define LINEARISED_AXISYM_FLUID_SLIP_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif


// OOMPH-LIB headers
//#include "../generic/shape.h"
//#include "../generic/elements.h"
//#include "../generic/element_with_external_element.h"


namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an applied slip
  /// in the axisym Navier Stokes eqns.
  /// The geometrical information can be read from the FaceGeometry<ELEMENT>
  /// class and and thus, we can be generic enough without the need to have
  /// a separate equations class.
  //======================================================================
  template<class ELEMENT>
  class LinearisedAxisymmetricNavierStokesSlipElement
    : public virtual FaceGeometry<ELEMENT>,
      public virtual FaceElement
  {
  private:
    unsigned Contact_line_data_index;

    /// Pointer to an imposed slip function. Arguments:
    /// Eulerian coordinate; outer unit normal;
    /// applied slip. (Not all of the input arguments will be
    /// required for all specific load functions but the list should
    /// cover all cases)
    std::function<void(const double&,
                       const Vector<double>&,
                       const Vector<double>&,
                       Vector<double>&)>
      Slip_function;

  protected:
    /// Index at which the i-th velocity component is stored
    Vector<unsigned> U_index_axisymmetric_nst_slip;

    /// Pointer to an imposed slip function. Arguments:
    /// Eulerian coordinate; outer unit normal;
    /// applied slip. (Not all of the input arguments will be
    /// required for all specific load functions but the list should
    /// cover all cases)
    void (*Slip_fct_pt)(const double& time,
                        const Vector<double>& x,
                        const Vector<double>& n,
                        Vector<double>& result);

    /// Get the slip vector: Pass number of integration point
    /// (dummy), Eulerian coordinate and normal vector and return the load
    /// vector (not all of the input arguments will be required for all specific
    /// load functions but the list should cover all cases). This function is
    /// virtual so it can be overloaded for FSI.
    virtual void get_slip(const double& time,
                          const unsigned& intpt,
                          const Vector<double>& x,
                          const Vector<double>& n,
                          Vector<double>& slip) const
    {
      try
      {
        Slip_function(time, x, n, slip);
      }
      catch (std::bad_function_call& e)
      {
        if (Slip_fct_pt == 0)
        {
          throw OomphLibError("No slip function has been set for the element",
                              OOMPH_CURRENT_FUNCTION,
                              OOMPH_EXCEPTION_LOCATION);
        }
        else
        {
          Slip_fct_pt(time, x, n, slip);
        }
      }
    }

    // Abstract function to get the solid perturbations
    virtual double Xhat(const unsigned& n,
                        const unsigned& i,
                        const unsigned& j) = 0;

    // Abstract function to get the base state's velocity
    virtual Vector<double> get_base_u(const Vector<double>& s) = 0;

    // Abstract function to get the base state's velocity
    virtual Vector<double> get_base_wall_velocity(const Vector<double>& s) = 0;

    /// Helper function that actually calculates the residuals
    // This small level of indirection is required to avoid calling
    // fill_in_contribution_to_residuals in fill_in_contribution_to_jacobian
    // which causes all kinds of pain if overloading later on
    void fill_in_contribution_to_residuals_linearised_axisymmetric_nst_slip(
      Vector<double>& residuals, DenseMatrix<double>& jacobian, unsigned flag);


  public:
    /// Constructor, which takes a "bulk" element and the
    /// value of the index and its limit
    LinearisedAxisymmetricNavierStokesSlipElement(
      FiniteElement* const& element_pt, const int& face_index)
      : FaceGeometry<ELEMENT>(), FaceElement()
    {
      // Attach the geometrical information to the element. N.B. This function
      // also assigns nbulk_value from the required_nvalue of the bulk element
      element_pt->build_face_element(face_index, this);

      // Find the dimension of the problem
      unsigned n_dim = element_pt->nodal_dimension();

      // Find the index at which the velocity unknowns are stored
      this->U_index_axisymmetric_nst_slip.resize(2 * (n_dim + 1));
      for (unsigned i = 0; i < 2 * (n_dim + 1); i++)
      {
        this->U_index_axisymmetric_nst_slip[i] = i + 4;
      }
    }

    /// Constructor, which takes a "bulk" element and the
    /// value of the index and its limit
    LinearisedAxisymmetricNavierStokesSlipElement(
      FiniteElement* const& element_pt,
      const int& face_index,
      SolidNode* const& contact_line_node_pt)
      : FaceGeometry<ELEMENT>(), FaceElement()
    {
      // Attach the geometrical information to the element. N.B. This function
      // also assigns nbulk_value from the required_nvalue of the bulk element
      element_pt->build_face_element(face_index, this);

      // Find the dimension of the problem
      unsigned n_dim = element_pt->nodal_dimension();

      // Find the index at which the velocity unknowns are stored
      this->U_index_axisymmetric_nst_slip.resize(2 * (n_dim + 1));
      for (unsigned i = 0; i < 2 * (n_dim + 1); i++)
      {
        this->U_index_axisymmetric_nst_slip[i] = i;
      }

      // Contact_line_data_index =
      add_external_data(contact_line_node_pt->variable_position_pt());
    }


    /// Reference to the slip function pointer
    void (*&slip_fct_pt())(const double& time,
                           const Vector<double>& x,
                           const Vector<double>& n,
                           Vector<double>& slip)
    {
      return Slip_fct_pt;
    }

    /// Reference to the slip function pointer
    void set_slip_function(
      const std::function<void(const double&,
                               const Vector<double>&,
                               const Vector<double>&,
                               Vector<double>&)>& slip_function)
    {
      Slip_function = slip_function;
    }

    /// Return the residuals
    void fill_in_contribution_to_residuals(Vector<double>& residuals)
    {
      fill_in_contribution_to_residuals_linearised_axisymmetric_nst_slip(
        residuals, GeneralisedElement::Dummy_matrix, 0);
    }


    /// Fill in contribution to Jacobian
    // void fill_in_contribution_to_jacobian(Vector<double>& residuals,
    //                                       DenseMatrix<double>& jacobian)
    //{
    //   // Fill in analytic contribution of internal equations
    //   fill_in_contribution_to_residuals_linearised_axisymmetric_nst_slip(
    //     residuals, jacobian, 1);

    //  // Fill in the solid position contribution by finite differences
    //  // fill_in_jacobian_from_solid_position_by_fd(jacobian);

    //  // Fill in the contribution from external data by finite differences
    //  fill_in_jacobian_from_external_by_fd(residuals, jacobian, false);
    //}

    /// Fill in contribution to Jacobian and Mass matrix
    void fill_in_contribution_to_jacobian_and_mass_matrix(
      Vector<double>& residuals,
      DenseMatrix<double>& jacobian,
      DenseMatrix<double>& mass_matrix)
    {
      fill_in_contribution_to_jacobian(residuals, jacobian);
      // Fill in analytic contribution of internal equations
      // fill_in_contribution_to_residuals_linearised_axisymmetric_nst_slip(
      //   residuals, jacobian, 1);

      // Fill in the contribution from external data by finite differences
      // fill_in_jacobian_from_external_by_fd(residuals, jacobian, false);
    }


    /// Specify the value of nodal zeta from the face geometry
    /// The "global" intrinsic coordinate of the element when
    /// viewed as part of a geometric object should be given by
    /// the FaceElement representation, by default (needed to break
    /// indeterminacy if bulk element is SolidElement)
    double zeta_nodal(const unsigned& n,
                      const unsigned& k,
                      const unsigned& i) const
    {
      return FaceElement::zeta_nodal(n, k, i);
    }

    /// Output function
    void output(std::ostream& outfile)
    {
      unsigned nplot = 3;
      output(outfile, nplot);
    }

    /// Return the i-th velocity component at local node n
    /// The default is to asssume that n is the local node number
    /// and the i-th velocity component is the i-th unknown stored at the
    /// node.
    /// j = 0, cosine. j = 1, sine.
    virtual inline double u(const unsigned& n,
                            const unsigned& i,
                            const unsigned& j)
    {
      return node_pt(n)->value(U_index_axisymmetric_nst_slip[2 * i + j]);
    }

    /// Output function
    void output(std::ostream& outfile, const unsigned& n_plot)
    {
      // Number of dimensions
      unsigned n_dim = this->nodal_dimension();

      // Find out how many nodes there are
      const unsigned n_node = nnode();

      // Get continuous time from timestepper of first node
      double time = node_pt(0)->time_stepper_pt()->time_pt()->time();

      // Set up memory for the shape functions
      Shape psi(n_node);

      // Local and global coordinates
      Vector<double> s(n_dim - 1);

      // Loop over plot points
      unsigned num_plot_points = this->nplot_points(n_plot);
      for (unsigned iplot = 0; iplot < num_plot_points; iplot++)
      {
        // Get local coordinates of plot point
        this->get_s_plot(iplot, n_plot, s);

        // Outer unit normal
        Vector<double> unit_normal(n_dim);
        outer_unit_normal(s, unit_normal);

        // Find the shape functions
        shape(s, psi);

        // Initialise to zero
        Vector<double> interpolated_x(n_dim);
        Vector<double> interpolated_u_c(n_dim + 1);
        Vector<double> interpolated_u_s(n_dim + 1);

        // Calculate stuff
        for (unsigned l = 0; l < n_node; l++)
        {
          // Loop over directions
          for (unsigned i = 0; i < n_dim; i++)
          {
            interpolated_x[i] += this->nodal_position(l, i) * psi[l];
          }

          for (unsigned i = 0; i < n_dim + 1; i++)
          {
            interpolated_u_c[i] += this->u(l, i, 0) * psi[l];
          }

          for (unsigned i = 0; i < n_dim + 1; i++)
          {
            interpolated_u_s[i] += this->u(l, i, 1) * psi[l];
          }
        }

        // Get the imposed slip
        Vector<double> slip(3);

        // Dummy integration point
        unsigned ipt = 0;
        get_slip(time, ipt, interpolated_x, unit_normal, slip);

        // Output the x,y,..
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << interpolated_x[i] << " ";
        }

        // Output the slip components
        for (unsigned i = 0; i < n_dim + 1; i++)
        {
          outfile << slip[i] << " ";
        }

        // Output normal
        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << unit_normal[i] << " ";
        }

        // Get the base state's velocity
        Vector<double> base_velocity = this->get_base_u(s);
        outfile << base_velocity[1] << " ";

        // Output the u,v,w
        for (unsigned i = 0; i < n_dim + 1; i++)
        {
          outfile << interpolated_u_c[i] << " ";
        }

        for (unsigned i = 0; i < n_dim; i++)
        {
          outfile << interpolated_u_s[i] << " ";
        }
        outfile << interpolated_u_s[n_dim] << std::endl;
      }
    }

    /// C_style output function
    void output(FILE* file_pt)
    {
      FiniteElement::output(file_pt);
    }

    /// C-style output function
    void output(FILE* file_pt, const unsigned& n_plot)
    {
      FiniteElement::output(file_pt, n_plot);
    }


    /// Compute slip vector at specified local coordinate
    /// Should only be used for post-processing; ignores dependence
    /// on integration point!
    void slip(const double& time,
              const Vector<double>& s,
              Vector<double>& slip);
  };

  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////
  /// ////////////////////////////////////////////////////////////////////

  //=====================================================================
  /// Compute slip vector at specified local coordinate
  /// Should only be used for post-processing; ignores dependence
  /// on integration point!
  //=====================================================================
  template<class ELEMENT>
  void LinearisedAxisymmetricNavierStokesSlipElement<ELEMENT>::slip(
    const double& time, const Vector<double>& s, Vector<double>& slip)
  {
    unsigned n_dim = this->nodal_dimension();

    // Position vector
    Vector<double> x(n_dim);
    interpolated_x(s, x);

    // Outer unit normal (only in r and z direction!)
    Vector<double> unit_normal(n_dim);
    outer_unit_normal(s, unit_normal);

    // Dummy
    unsigned ipt = 0;

    // Slip vector
    get_slip(time, ipt, x, unit_normal, slip);
  }


  //=====================================================================
  /// Return the residuals for the
  /// LinearisedAxisymmetricNavierStokesSlipElement equations
  //=====================================================================
  template<class ELEMENT>
  void LinearisedAxisymmetricNavierStokesSlipElement<ELEMENT>::
    fill_in_contribution_to_residuals_linearised_axisymmetric_nst_slip(
      Vector<double>& residuals, DenseMatrix<double>& jacobian, unsigned flag)
  {
    // Find out how many nodes there are
    unsigned n_node = nnode();

    // Get continuous time from timestepper of first node
    double time = node_pt(0)->time_stepper_pt()->time_pt()->time();

#ifdef PARANOID
    // Find out how many positional dofs there are
    unsigned n_position_type = this->nnodal_position_type();
    if (n_position_type != 1)
    {
      throw OomphLibError("AxisymmetricNavierStokes is not yet implemented for "
                          "more than one position type",
                          OOMPH_CURRENT_FUNCTION,
                          OOMPH_EXCEPTION_LOCATION);
    }
#endif

    // Find out the dimension of the node
    unsigned n_dim = this->nodal_dimension();

    // Integer to hold the local equation number
    int local_eqn = 0;
    int local_unknown = 0;

    // Set up memory for the shape functions
    // Note that in this case, the number of lagrangian coordinates is always
    // equal to the dimension of the nodes
    Shape psi(n_node);
    DShape dpsids(n_node, n_dim - 1);

    // Set the value of n_intpt
    unsigned n_intpt = integral_pt()->nweight();

    // Storage for the local coordinate
    Vector<double> s(1);

    // Loop over the integration points
    for (unsigned ipt = 0; ipt < n_intpt; ipt++)
    {
      // Get the local coordinate at the integration point
      s[0] = integral_pt()->knot(ipt, 0);

      // Get the integral weight
      double w = integral_pt()->weight(ipt);

      // Only need to call the local derivatives
      dshape_local_at_knot(ipt, psi, dpsids);

      // Calculate the Eulerian and Lagrangian coordinates
      Vector<double> interpolated_x(n_dim, 0.0);
      Vector<double> interpolated_t(n_dim, 0.0);
      Vector<double> interpolated_u(2 * (n_dim + 1), 0.0);
      Vector<double> interpolated_Z(2, 0.0);
      Vector<double> interpolated_dZds(2, 0.0);

      // Calculate positions and derivatives
      for (unsigned l = 0; l < n_node; l++)
      {
        // Loop over directions
        for (unsigned i = 0; i < n_dim; i++)
        {
          // Calculate the Eulerian coords
          const double x_local = nodal_position(l, i);
          interpolated_x[i] += x_local * psi(l);
          interpolated_t[i] += x_local * dpsids(l, 0);
        }

        // Loop over directions
        for (unsigned i = 0; i < n_dim + 1; i++)
        {
          // for cosine/sine components
          for (unsigned j = 0; j < 2; j++)
          {
            interpolated_u[2 * i + j] += u(l, i, j) * psi(l);
          }
        }

        // for cosine/sine components
        for (unsigned j = 0; j < 2; j++)
        {
          interpolated_Z[j] += this->Xhat(l, 1, j) * psi(l);
          interpolated_dZds[j] += this->Xhat(l, 1, j) * dpsids(l, 0);
        }
      }

      // Get the outer unit normal
      Vector<double> interpolated_normal(n_dim);
      outer_unit_normal(ipt, interpolated_normal);

      // Add the azimuthal direction manually
      interpolated_normal.push_back(0.0);

      // Check if the element is reversed
      Vector<Vector<double>> tang_vec(1);
      tang_vec[0].resize(2, 0.0);
      Vector<double> unit_normal(n_dim, 0.0);
      continuous_tangent_and_outer_unit_normal(s, tang_vec, unit_normal);
      Vector<double> continuous_t1(n_dim, 0.0);
      continuous_t1 = tang_vec[0];

      bool is_element_reversed = false;
      is_element_reversed = (continuous_t1[0] * interpolated_t[0] +
                             continuous_t1[1] * interpolated_t[1]) < 0;
      // If the element is reversed
      if (is_element_reversed)
      {
        // negate the derivatives
        // for cosine/sine components
        for (unsigned j = 0; j < 2; j++)
        {
          interpolated_dZds[j] = -interpolated_dZds[j];
        }
      }

      // Get the base state's velocity
      Vector<double> base_velocity = this->get_base_u(s);
      Vector<double> base_wall_velocity = this->get_base_wall_velocity(s);

      // Calculate the length of the tangent Vector
      double tlength = interpolated_t[0] * interpolated_t[0] +
                       interpolated_t[1] * interpolated_t[1];

      // Set the Jacobian of the line element
      // multiplied by r (x[0])
      double J = sqrt(tlength) * interpolated_x[0];

      // Now calculate the load
      Vector<double> slip(n_dim + 1);
      get_slip(time, ipt, interpolated_x, interpolated_normal, slip);


      // Loop over the test functions, nodes of the element
      for (unsigned l = 0; l < n_node; l++)
      {
        // Loop over the velocity components
        for (unsigned i = 0; i < n_dim + 1; i++)
        {
          // Loop over the cosine and sine components
          for (unsigned j = 0; j < 2; j++)
          {
            // Equation number
            local_eqn = this->nodal_local_eqn(
              l, U_index_axisymmetric_nst_slip[2 * i + j]);
            /*IF it's not a boundary condition*/
            if (local_eqn >= 0)
            {
              // Add the slip terms to the residuals
              if (slip[i] > 0)
              {
                residuals[local_eqn] -=
                  1.0 / slip[i] * psi(l) * interpolated_u[2 * i + j] * J * w;
                // If we are considering the vertical component,
                if (i == 1)
                {
                  // Then we need to add the contribution from the base flow
                  // times the perturbation to the change in coordinates
                  residuals[local_eqn] -=
                    1.0 / slip[i] * psi(l) *
                    (base_velocity[1] - base_wall_velocity[1]) *
                    continuous_t1[1] * interpolated_dZds[j] * w;

                  // residuals[local_eqn] -= 1.0 / slip[i] * psi(l) *
                  //                         base_velocity[1] *
                  //                         interpolated_dZds[j] * 4 * w;

                  // residuals[local_eqn] -= 1.0 / slip[i] * psi(l) *
                  //                         base_velocity[1] *
                  //                         interpolated_Z[j] * w;

                  //// Then we need to add the contribution from the base flow
                  //// times the perturbation to the change in coordinates
                  // residuals[local_eqn] -= 1.0 / slip[i] * psi(l) *
                  //                         base_velocity[1] *
                  //                         interpolated_Z[j] * w;
                }

                // Add in the Jacobian term
                if (flag)
                {
                  // Loop over the test functions, nodes of the element
                  for (unsigned l2 = 0; l2 < n_node; l2++)
                  {
                    local_unknown = this->nodal_local_eqn(
                      l2, U_index_axisymmetric_nst_slip[2 * i + j]);
                    // If it's a non-zero dof add
                    if (local_unknown >= 0)
                    {
                      jacobian(local_eqn, local_unknown) -=
                        1.0 / slip[i] * psi(l) * psi(l2) * J * w;
                    }
                  }
                }
              }
            }
          }
        }
      } // End of loop over shape functions
    } // End of loop over integration points
  }

} // namespace oomph


#endif

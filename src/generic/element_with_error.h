// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2024 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for the class
// ElementWithExternalElement which stores pointers to external elements

// Include guards to prevent multiple inclusion of the header
#ifndef OOMPH_STORE_ERROR_ELEMENT_HEADER
#define OOMPH_STORE_ERROR_ELEMENT_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

namespace oomph
{
  /// A wrapper element to store the error generated from the error estimator,
  /// e.g. Z2ErrorEstimator
  template<class ELEMENT>
  class ElementWithError : public ELEMENT
  {
  private:
    /// Store the error
    double Error;

  public:
    /// Constructor
    ElementWithError() : ELEMENT(), Error(0.0) {}

    /// Set error value for post-processing
    void set_error(const double& error)
    {
      Error = error;
    }

    /// Get error value for post-processing
    double get_error()
    {
      return Error;
    }
  };

  // Ensure that the FaceGeometry of the new element has been set up
  template<class ELEMENT>
  class FaceGeometry<ElementWithError<ELEMENT>>
    : public virtual FaceGeometry<ELEMENT>
  {
  };

} // namespace oomph

#endif

// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2024 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for Navier Stokes equation numbering elements

#ifndef OOMPH_NAVIER_STOKES_EQUATION_NUMBERING_ELEMENTS_HEADER
#define OOMPH_NAVIER_STOKES_EQUATION_NUMBERING_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/shape.h"
#include "../generic/elements.h"

namespace oomph
{
  //======================================================================
  /// Template-free base class for Navier-Stokes equations to avoid
  /// casting problems
  //======================================================================
  class NavierStokesEquationNumberingElement : public virtual FiniteElement
  {
  private:
    /// Static "magic" number that indicates that the pressure is
    /// not stored at a node
    const int Pressure_not_stored_at_node;

  public:
    NavierStokesEquationNumberingElement() : Pressure_not_stored_at_node(-100)
    {
    }

    /// Velocity i at local node n. Uses suitably interpolated value
    /// for hanging nodes. The use of u_index_nst() permits the use of this
    /// element as the basis for multi-physics elements. The default
    /// is to assume that the i-th velocity component is stored at the
    /// i-th location of the node
    double u_nst(const unsigned& n, const unsigned& i) const
    {
      return nodal_value(n, u_index_nst(n, i));
    }

    /// Velocity i at local node n at timestep t (t=0: present;
    /// t>0: previous). Uses suitably interpolated value for hanging nodes.
    double u_nst(const unsigned& t, const unsigned& n, const unsigned& i) const
    {
      return nodal_value(t, n, u_index_nst(n, i));
    }

    /// Return the index at which the i-th unknown velocity component
    /// is stored. The default value, i, is appropriate for single-physics
    /// problems.
    /// In derived multi-physics elements, this function should be overloaded
    /// to reflect the chosen storage scheme. Note that these equations require
    /// that the unknowns are always stored at the same indices at each node.
    virtual inline unsigned u_index_nst(const unsigned& i) const
    {
      return i;
    }

    /// Return the index at which the i-th unknown velocity component
    /// is stored at the n-th node. The default value, i, is appropriate for
    /// single-physics problems. In derived multi-physics elements, this
    /// function should be overloaded to reflect the chosen storage scheme.
    virtual inline unsigned u_index_nst(const unsigned& n,
                                        const unsigned& i) const
    {
      return i;
    }

    virtual inline unsigned momentum_index_nst(const unsigned& n,
                                               const unsigned& i) const
    {
      return i;
    }

    virtual inline int momentum_local_eqn(const unsigned& n,
                                          const unsigned& i) const
    {
      return nodal_local_eqn(n, momentum_index_nst(n, i));
    }

    inline int u_local_unknown(const unsigned& n, const unsigned& i) const
    {
      return nodal_local_eqn(n, u_index_nst(n, i));
    }

    /// Return the index at which the pressure is stored if it is
    /// stored at the nodes. If not stored at the nodes this will return
    /// a negative number.
    virtual int p_nodal_index_nst() const
    {
      return Pressure_not_stored_at_node;
    }

    /// Access function for the local equation number information for
    /// the pressure.
    /// p_local_eqn[n] = local equation number or < 0 if pinned
    virtual int p_local_eqn(const unsigned& n) const = 0;

    /// Function to return number of pressure degrees of freedom
    virtual unsigned npres_nst() const = 0;

    /// Return the number of velocity components for use in
    /// general FluidInterface clas
    virtual inline unsigned n_u_nst() const = 0;
  };
} // namespace oomph
#endif

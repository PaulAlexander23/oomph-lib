// Header file for elements that are used to integrate fluid tractions
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!

#ifndef OOMPH_NAVIER_STOKES_FACE_ELEMENTS_HEADER
#define OOMPH_NAVIER_STOKES_FACE_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/elements.h"
#include "navier_stokes_elements.h"

namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an applied traction
  /// to the Navier--Stokes equations
  /// The geometrical information can be read from the
  /// FaceGeometry<NavierStokesEquationNumberingElement> class and and thus, we
  /// can be generic enough without the need to have a separate equations class
  //======================================================================
  class NavierStokesFaceElement : public virtual FaceElement
  {
  public:
    /// Return the number of velocity components
    virtual inline unsigned n_u_nst() const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->n_u_nst();
    }

    /// Return the index at which the i-th unknown velocity component
    /// is stored at the n-th node.
    virtual inline unsigned u_index_nst(const unsigned& n,
                                        const unsigned& i) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      const unsigned N = this->bulk_node_number(n);
      return el_pt->u_index_nst(N, i);
    }

    /// Return the index at which the pressure is stored if it is
    /// stored at the nodes. If not stored at the nodes this will return
    /// a negative number.
    virtual int p_nodal_index_nst() const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->p_nodal_index_nst();
    }

    /// Return the index at which the pressure is stored at node n if it is
    /// stored at the nodes. If not stored at the nodes this will return
    /// a negative number.
    virtual int p_nodal_index_nst(const unsigned& n) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->p_nodal_index_nst();
    }

    /// Return the index at which the i-th momentum equation component
    /// is stored at the n-th node.
    virtual inline unsigned momentum_index_nst(const unsigned& n,
                                               const unsigned& i) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->momentum_index_nst(this->bulk_node_number(n), i);
    }

    /// Return the index at which the continuity equation
    /// is stored at the n-th node.
    virtual inline unsigned nst_continuity_index(const unsigned& n) const
    {
      const int nodal_index = p_nodal_index_nst(n);
      return nodal_index;
    }

    /// Return the local unknown number for the i-th velocity
    /// component at node n.
    virtual inline int nst_u_local_unknown(const unsigned& n,
                                           const unsigned& i) const
    {
      const unsigned nodal_index = u_index_nst(n, i);
      return this->nodal_local_eqn(n, nodal_index);
    }

    /// Return the local equation number for the i-th momentum equation
    /// component at node n.
    virtual inline int nst_momentum_local_eqn(const unsigned& n,
                                              const unsigned& i) const
    {
      const unsigned nodal_index = momentum_index_nst(n, i);
      return this->nodal_local_eqn(n, nodal_index);
    }

    /// Return the local equation number for the continuity equation
    /// at node n.
    virtual inline int nst_continuity_local_eqn(const unsigned& n) const
    {
      const unsigned nodal_index = nst_continuity_index(n);
      return this->nodal_local_eqn(n, nodal_index);
    }
  };

} // namespace oomph

#endif

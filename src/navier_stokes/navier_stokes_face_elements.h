// Header file for elements that are used to integrate fluid tractions
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!

#ifndef OOMPH_NAVIER_STOKES_FACE_ELEMENTS_HEADER
#define OOMPH_NAVIER_STOKES_FACE_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/elements.h"
#include "navier_stokes_elements.h"

namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an applied traction
  /// to the Navier--Stokes equations
  /// The geometrical information can be read from the
  /// FaceGeometry<NavierStokesEquationNumberingElement> class and and thus, we
  /// can be generic enough without the need to have a separate equations class
  //======================================================================
  class NavierStokesFaceElement : public virtual FaceElement
  {
  public:
    virtual inline unsigned u_index_nst(const unsigned& n,
                                        const unsigned& i) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->u_index_nst(this->bulk_node_number(n), i);
    }

    virtual int p_nodal_index_nst(const unsigned& n) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->p_nodal_index_nst(this->bulk_node_number(n));
    }

    virtual inline unsigned momentum_index_nst(const unsigned& n,
                                               const unsigned& i) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->momentum_index_nst(this->bulk_node_number(n), i);
    }

    virtual inline unsigned continuity_nodal_index_nst(const unsigned& n) const
    {
      NavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<NavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->continuity_nodal_index_nst(this->bulk_node_number(n));
    }
  };

} // namespace oomph

#endif

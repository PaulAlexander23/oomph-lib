// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2022 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for specific (two-dimensional) fluid free surface elements

// Include guards, to prevent multiple includes
#ifndef OOMPH_SPECIFIC_NODE_UPDATE_INTERFACE_FACE_ELEMENTS_HEADER
#define OOMPH_SPECIFIC_NODE_UPDATE_INTERFACE_FACE_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/elements.h"
#include "../generic/Qelements.h"
#include "../generic/spines.h"
#include "../generic/hijacked_elements.h"
#include "interface_elements.h"
#include "interface_contact_elements.h"
#include "fluid_interface_face_element.h"
#include "interface_contact_elements.h"

namespace oomph
{
  template<class ELEMENT>
  class StaticFluidInterfaceBoundingElement
    : public virtual ContactLineElement,
      public virtual FaceGeometry<ELEMENT>
  {
    // Set all lagrange_multipliers to zero and pin
  };

  template<class ELEMENT>
  class SolidFluidInterfaceBoundingElement
    : public virtual ContactLineElement,
      public virtual FaceGeometry<ELEMENT>,
      public virtual SolidFaceElement
  {
  public:
    virtual const unsigned fsi_lagrange_multiplier_nodal_index(
      const unsigned& n)
    {
      ELEMENT* el_pt = dynamic_cast<ELEMENT*>(this->bulk_element_pt());
      return el_pt->lagrange_index(this->bulk_node_number(n));
    }

    /// Calculate the residuals
    void fill_in_contribution_to_jacobian(Vector<double>& residuals,
                                          DenseMatrix<double>& jacobian)
    {
      std::cout << "Jacobian" << std::endl;
      // Add the contribution to the residuals
      fill_in_contribution_to_residuals(residuals);

      // Allocate storage for the full residuals (residuals of entire element)
      unsigned n_dof = ndof();
      Vector<double> full_residuals(n_dof);
      // Get the residuals for the entire element
      get_residuals(full_residuals);
      std::cout << "solid" << std::endl;
      // Get the solid entries in the jacobian using finite differences
      fill_in_jacobian_from_solid_position_by_fd(full_residuals, jacobian);
      // There could be internal data
      //(finite-difference the lot by default)
      std::cout << "internal" << std::endl;
      fill_in_jacobian_from_internal_by_fd(full_residuals, jacobian, true);
      // There could also be external data
      //(finite-difference the lot by default)
      std::cout << "external" << std::endl;
      fill_in_jacobian_from_external_by_fd(full_residuals, jacobian, true);
      // There could also be nodal data
      std::cout << "nodal" << std::endl;
      fill_in_jacobian_from_nodal_by_fd(full_residuals, jacobian);
      std::cout << "End of Jacobian" << std::endl;
    }
  };

  template<class ELEMENT>
  class SpineFluidInterfaceBoundingElement
    : public virtual ContactLineElement,
      public virtual Hijacked<SpineElement<FaceGeometry<ELEMENT>>>
  {
  };

} // namespace oomph
#endif

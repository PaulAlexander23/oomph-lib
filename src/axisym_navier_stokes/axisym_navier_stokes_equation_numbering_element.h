// LIC// ====================================================================
// LIC// This file forms part of oomph-lib, the object-oriented,
// LIC// multi-physics finite-element library, available
// LIC// at http://www.oomph-lib.org.
// LIC//
// LIC// Copyright (C) 2006-2024 Matthias Heil and Andrew Hazel
// LIC//
// LIC// This library is free software; you can redistribute it and/or
// LIC// modify it under the terms of the GNU Lesser General Public
// LIC// License as published by the Free Software Foundation; either
// LIC// version 2.1 of the License, or (at your option) any later version.
// LIC//
// LIC// This library is distributed in the hope that it will be useful,
// LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
// LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// LIC// Lesser General Public License for more details.
// LIC//
// LIC// You should have received a copy of the GNU Lesser General Public
// LIC// License along with this library; if not, write to the Free Software
// LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
// LIC// 02110-1301  USA.
// LIC//
// LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
// LIC//
// LIC//====================================================================
// Header file for Navier Stokes equation numbering elements

#ifndef OOMPH_AXISYM_NAVIER_STOKES_EQUATION_NUMBERING_ELEMENTS_HEADER
#define OOMPH_AXISYM_NAVIER_STOKES_EQUATION_NUMBERING_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/shape.h"
#include "../generic/elements.h"
#include "../navier_stokes/navier_stokes_equation_numbering_element.h"

namespace oomph
{
  //======================================================================
  /// Template-free base class for Navier-Stokes equations to avoid
  /// casting problems
  //======================================================================
  class AxisymmetricNavierStokesEquationNumberingElement
    : public virtual NavierStokesEquationNumberingElement
  {
  public:
    /// Return the index at which the i-th unknown velocity component
    /// is stored. The default value, i, is appropriate for single-physics
    /// problems.
    /// In derived multi-physics elements, this function should be overloaded
    /// to reflect the chosen storage scheme. Note that these equations require
    /// that the unknowns are always stored at the same indices at each node.
    virtual inline unsigned u_index_axi_nst(const unsigned& i) const
    {
      // If this function is called we are assuming that all the velocities are
      // indexed like node 0
      const unsigned node_index = 0;
      return this->u_index_axi_nst(node_index, i);
    }

    /// Return the index at which the i-th unknown velocity component
    /// is stored for the n-th node. The default value, i, is appropriate for
    /// single-physics problems. In derived multi-physics elements, this
    /// function should be overloaded to reflect the chosen storage scheme. Note
    /// that these equations require that the unknowns are always stored at the
    /// same indices at each node.
    virtual inline unsigned u_index_axi_nst(const unsigned& n,
                                            const unsigned& i) const
    {
      return this->u_index_nst(n, i);
    }

    /// Return the index at which the i-th momentum equation component
    /// is stored at the n-th node. The default value, i, is appropriate for
    /// single-physics problems.
    virtual inline unsigned axi_momentum_index_nst(const unsigned& n,
                                                   const unsigned& i) const
    {
      return u_index_axi_nst(n, i);
    }

    /// Return the local equation number for the i-th momentum equation
    /// component at node n.
    virtual inline int axi_momentum_local_eqn(const unsigned& n,
                                              const unsigned& i) const
    {
      return nodal_local_eqn(n, axi_momentum_index_nst(n, i));
    }

    /// Return the local unknown number for the i-th velocity
    /// component at node n.
    inline int u_axi_nst_local_unknown(const unsigned& n,
                                       const unsigned& i) const
    {
      return nodal_local_eqn(n, u_index_axi_nst(n, i));
    }

    /// A function to return number of pressure degrees of freedom
    virtual unsigned npres_axi_nst() const = 0;

    /// A function to return number of pressure degrees of freedom
    virtual unsigned npres_nst() const
    {
      return npres_axi_nst();
    }

    /// Which nodal value represents the pressure?
    virtual int p_nodal_index_axi_nst() const
    {
      return p_nodal_index_nst();
    }
  };
} // namespace oomph
#endif

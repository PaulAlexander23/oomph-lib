// Header file for elements that are used to integrate fluid tractions
// This includes the guts (i.e. equations) because we want to inline them
// for faster operation, although it slows down the compilation!

#ifndef OOMPH_AXISYM_NAVIER_STOKES_FACE_ELEMENTS_HEADER
#define OOMPH_AXISYM_NAVIER_STOKES_FACE_ELEMENTS_HEADER

// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
#include <oomph-lib-config.h>
#endif

// OOMPH-LIB headers
#include "../generic/elements.h"
#include "axisym_navier_stokes_elements.h"

namespace oomph
{
  //======================================================================
  /// A class for elements that allow the imposition of an applied traction
  /// to the Navier--Stokes equations
  /// The geometrical information can be read from the
  /// FaceGeometry<AxisymmetricNavierStokesEquationNumberingElement> class and
  /// and thus, we can be generic enough without the need to have a separate
  /// equations class
  //======================================================================
  class AxisymmetricNavierStokesFaceElement : public virtual FaceElement
  {
  public:
    AxisymmetricNavierStokesFaceElement() {}

    /// Return the index at which the i-th unknown velocity component
    /// is stored for node n. The default value, i, is appropriate for
    /// single-physics problems.
    virtual inline unsigned u_index_axi_nst(const unsigned& n,
                                            const unsigned& i) const
    {
      AxisymmetricNavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<AxisymmetricNavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->u_index_axi_nst(this->bulk_node_number(n), i);
    }

    /// Which nodal value represents the pressure?
    virtual int p_nodal_index_axi_nst() const
    {
      AxisymmetricNavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<AxisymmetricNavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->p_nodal_index_axi_nst();
    }

    /// Return the local equation number for the i-th momentum equation
    /// component at node n.
    virtual inline unsigned axi_momentum_index_nst(const unsigned& n,
                                                   const unsigned& i) const
    {
      AxisymmetricNavierStokesEquationNumberingElement* el_pt =
        dynamic_cast<AxisymmetricNavierStokesEquationNumberingElement*>(
          this->bulk_element_pt());
      return el_pt->axi_momentum_index_nst(this->bulk_node_number(n), i);
    }
  };

} // namespace oomph

#endif
